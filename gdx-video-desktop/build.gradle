apply plugin: "java-library"

if (JavaVersion.current().isJava9Compatible()) {
    compileJava {
        options.release = 7
    }
}
targetCompatibility = 1.7
sourceCompatibility = 1.7

java {
    withSourcesJar()
    withJavadocJar()
}

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
    }
}

configurations {
    custom
    compile.extendsFrom custom
}

dependencies {
    api project(":gdx-video-core")
}

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

jnigen {
    sharedLibName = "gdx-video-desktop"
    all {
        headerDirs = []
        cFlags += " -fvisibility=hidden "
        cppFlags += " -fvisibility=hidden "
        //Using `-lavcodec -lavformat` order on linux drops filesize by half but mingw wont compile???
        libraries += " -lavformat -lavcodec -lavutil -lswscale -lswresample -lpthread -ldav1d"
    }
    def genLibs = { String buildName ->
        String outPath = file("FFmpeg/build/$buildName").absolutePath
        return " -L$outPath/lib"
    }
    def genHeaders = { String buildName ->
        String outPath = file("FFmpeg/build/$buildName").absolutePath
        return [ "$outPath/include" ]
    }

    add(Windows, x32) {
        headerDirs += genHeaders("windows32")
        cppFlags += " -DWIN32 "
        libraries += genLibs("windows32") + " -lbcrypt -lws2_32"
    }
    add(Windows, x64) {
        headerDirs += genHeaders("windows64")
        cppFlags += " -DWIN32 "
        libraries += genLibs("windows64") + " -lbcrypt -lws2_32"
    }
    add(Linux, x64) {
        headerDirs += genHeaders("linux64")
        libraries += genLibs("linux64")
        if(os.name() != "Linux") {
            compilerPrefix = 'x86_64-linux-gnu'
        }
        linkerFlags += " -Wl,-Bsymbolic "
    }
    add(Linux, x32, ARM) {
        headerDirs += genHeaders("linuxarm32")
        libraries += genLibs("linuxarm32")
        linkerFlags += " -Wl,-Bsymbolic "
    }
    add(Linux, x64, ARM) {
        headerDirs += genHeaders("linuxarm64")
        libraries += genLibs("linuxarm64")
        linkerFlags += " -Wl,-Bsymbolic "
    }
    add(MacOsX, x64) {
        headerDirs += genHeaders("macos64")
        libraries += genLibs("macos64") + " -liconv -lbz2 -lz -framework CoreFoundation -framework CoreVideo -framework CoreMedia -framework VideoToolbox"
        cFlags += " -mmacosx-version-min=10.11"
        cppFlags += " -mmacosx-version-min=10.11"
        linkerFlags += " -mmacosx-version-min=10.11"
    }
    add(MacOsX, x64, ARM) {
        headerDirs += genHeaders("macosarm64")
        libraries += genLibs("macosarm64") + " -liconv -lbz2 -lz -framework CoreFoundation -framework CoreVideo -framework CoreMedia -framework VideoToolbox"
        cFlags += " -mmacosx-version-min=10.11"
        cppFlags += " -mmacosx-version-min=10.11"
        linkerFlags += " -mmacosx-version-min=10.11"
    }
}

tasks.register('jnigenBuildWindowsAll') {
    dependsOn jnigenBuildWindows, jnigenBuildWindows64
}

tasks.register('jnigenBuildLinuxAll') {
    dependsOn jnigenBuildLinux64, jnigenBuildLinuxARM, jnigenBuildLinuxARM64
}

tasks.register('jnigenBuildMacosAll') {
    dependsOn jnigenBuildMacOsX64, jnigenBuildMacOsXARM64
}

jar {
    from fileTree("libs").files
}

eclipse.project {
    name = projectGroup + "-desktop"
}
