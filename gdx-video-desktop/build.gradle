apply plugin: "java-library"

if (JavaVersion.current().isJava9Compatible()) {
    compileJava {
        options.release = 7
    }
}
targetCompatibility = 1.7
sourceCompatibility = 1.7

java {
    withSourcesJar()
    withJavadocJar()
}

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
    }
}

configurations {
    custom
    compile.extendsFrom custom
}

dependencies {
    api project(":gdx-video-core")
}

apply plugin: "com.badlogicgames.gdx.gdx-jnigen"

tasks.register('cleanFFmpeg')
tasks.register('cleanAV1')
clean.configure {
    dependsOn 'cleanFFmpeg'
    dependsOn 'cleanAV1'
}

String checkCrossPrefix(String crossToolchain) {
    def tc = crossToolchain
    if (tc == null || System.getProperty("os.name").startsWith("Win")) return ""
    def result = project.exec {
        ignoreExitValue = true
        commandLine "bash", "-l", "-c",
            "(command -v $tc-g++ && command -v $tc-ar && command -v $tc-ld)>/dev/null"
    }
    if(result.getExitValue() == 0) {
        return "$tc-"
    }
    return ""
}

String checkCrossFile(String buildName, String crossToolchain) {
    String prefix = checkCrossPrefix(crossToolchain)
    if(prefix.isEmpty()) {
        return ""
    }
    def options = [
            "Windows32": "i686-w64-mingw32",
            "Windows64": "x86_64-w64-mingw32",
            "LinuxARM64": "aarch64-linux"
    ]
    def name = options[buildName]
    return "dependencies/dav1d/packages/crossfiles/$name.meson"
}


void registerBuild(String buildName, String crossToolchain, String... extraArgs) {
    String av1Dir = "dependencies/build/${buildName.toLowerCase()}/dav1d"
    String ffDir = file("dependencies/build/${buildName.toLowerCase()}/FFmpeg").absolutePath

    tasks.register("cleanAV1$buildName", Delete) {
        delete av1Dir
    }
    cleanAV1.configure {
        dependsOn "cleanAV1$buildName"
    }
    tasks.register("buildAV1$buildName") {
        doFirst {
            mkdir av1Dir
            String[] crossArgs = []
            def crossFile = checkCrossFile(buildName, crossToolchain)
            if(!crossFile.isEmpty()) {
                def crosspath = file(crossFile).absolutePath
                crossArgs = ["--cross-file=$crosspath"]
            }
            project.exec {
                workingDir av1Dir
                executable 'meson'
                args 'setup', '-Denable_tools=false', '-Denable_tests=false'
                args crossArgs
                args '../../../dav1d', '--default-library=static'
                args '--prefix', "$ffDir/ffmpeg_build"
                args "--libdir=$ffDir/ffmpeg_build/lib"
            }
            project.exec {
                workingDir av1Dir
                commandLine 'ninja'
            }
            project.exec {
                workingDir av1Dir
                commandLine 'ninja', 'install'
            }
        }
        outputs.upToDateWhen { file("$ffDir/ffmpeg_build/lib/libdav1d.a").exists() }
    }

    tasks.register("cleanFFmpeg$buildName", Delete) {
        delete ffDir
    }
    cleanFFmpeg.configure {
        dependsOn "cleanFFmpeg$buildName"
    }
    tasks.register("buildFFmpeg$buildName") {
        dependsOn "buildAV1$buildName"
        doFirst {
            mkdir ffDir
            String[] crossArgs = []
            def crossPrefix = checkCrossPrefix(crossToolchain)
            if(!crossPrefix.isEmpty()) {
                crossArgs = ["--enable-cross-compile", "--cross-prefix=$crossPrefix"]
            }
            project.exec {
                workingDir ffDir
                environment["PKG_CONFIG_PATH"] = "$ffDir/ffmpeg_build/lib/pkgconfig"
                executable '../../../FFmpeg/configure'
                args '--enable-pic', '--disable-symver', '--disable-doc', '--disable-shared', '--enable-static'
                args crossArgs
                args '--disable-everything'
                args '--enable-protocol=file', '--enable-filter=aresample', '--enable-filter=deshake'
                args '--enable-demuxer=ogg', '--enable-demuxer=matroska'
                args '--enable-decoder=vorbis', '--enable-decoder=opus'
                args '--enable-decoder=vp8', '--enable-decoder=vp9', '--enable-decoder=theora', '--enable-decoder=av1'
                args '--enable-libdav1d', '--enable-decoder=libdav1d'
                args "--extra-cflags=-I$ffDir/ffmpeg_build/include"
                args "--extra-ldflags=-L$ffDir/ffmpeg_build/lib"
                args "--prefix=$ffDir/ffmpeg_build"
                // Uncomment the following line for MP4 video support:
                // args '--enable-demuxer=mov', '--enable-decoder=aac', '--enable-decoder=h264', '--enable-decoder=hevc'
                args extraArgs
            }
            project.exec {
                workingDir ffDir
                commandLine 'make', '-j16'
            }
            project.exec {
                workingDir ffDir
                commandLine 'make', 'install'
            }
        }
        outputs.upToDateWhen { file("$ffDir/ffmpeg_build/lib/libavformat.a").exists() }
    }
}

registerBuild 'Windows32', 'i686-w64-mingw32', '--arch=x86', '--target-os=mingw32'
registerBuild 'Windows64', 'x86_64-w64-mingw32', '--arch=x86_64', '--target-os=mingw32'

registerBuild 'Linux64', 'x86_64-linux-gnu', '--arch=x86_64', '--target-os=linux', '--disable-cuda', '--disable-cuvid'

registerBuild 'LinuxARM32', 'arm-linux-gnueabihf', '--arch=arm', '--target-os=linux', '--disable-decoder=libdav1d'
registerBuild 'LinuxARM64', 'aarch64-linux-gnu', '--arch=aarch64', '--target-os=linux'

registerBuild 'Macos64', null, '--enable-cross-compile', '--arch=x86_64', '--target-os=darwin', '--cc=clang', '--cxx=clang++', '--dep-cc=clang',
        '--extra-cflags=-mmacosx-version-min=10.11 -arch x86_64', '--extra-cxxflags=-mmacosx-version-min=10.11 -arch x86_64', '--extra-ldflags=-mmacosx-version-min=10.11 -arch x86_64'
registerBuild 'MacosARM64', null, '--enable-cross-compile', '--arch=arm64', '--target-os=darwin', '--cc=clang', '--cxx=clang++', '--dep-cc=clang',
        '--extra-cflags=-mmacosx-version-min=10.11 -arch arm64', '--extra-cxxflags=-mmacosx-version-min=10.11 -arch arm64', '--extra-ldflags=-mmacosx-version-min=10.11 -arch arm64'

jnigen {
    sharedLibName = "gdx-video-desktop"
    all {
        headerDirs = []
        cFlags += " -fvisibility=hidden "
        cppFlags += " -fvisibility=hidden "
        //Using `-lavcodec -lavformat` order on linux drops filesize by half but mingw wont compile???
        libraries += " -lavformat -lavcodec -lavutil -lswscale -lswresample -lpthread -ldav1d"
    }
    def genLibs = { String buildName ->
        String ffPath = file("dependencies/build/$buildName/FFmpeg").absolutePath
        return " -L$ffPath/ffmpeg_build/lib"
    }
    def genHeaders = { String buildName ->
        String ffPath = file("dependencies/build/$buildName/FFmpeg").absolutePath
        return " -I$ffPath/ffmpeg_build/include"
    }

    add(Windows, x32) {
        headerDirs += genHeaders("windows32")
        cppFlags += " -DWIN32 "
        libraries += genLibs("windows32") + " -lbcrypt -lws2_32"
    }
    add(Windows, x64) {
        headerDirs += genHeaders("windows64")
        cppFlags += " -DWIN32 "
        libraries += genLibs("windows64") + " -lbcrypt -lws2_32"
    }
    add(Linux, x64) {
        headerDirs += genHeaders("linux64")
        libraries += genLibs("linux64")
        compilerPrefix = checkCrossPrefix('x86_64-linux-gnu')
        linkerFlags += " -Wl,-Bsymbolic "
    }
    add(Linux, x32, ARM) {
        headerDirs += genHeaders("linuxarm32")
        libraries += genLibs("linuxarm32")
        linkerFlags += " -Wl,-Bsymbolic "
    }
    add(Linux, x64, ARM) {
        headerDirs += genHeaders("linuxarm64")
        libraries += genLibs("linuxarm64")
        linkerFlags += " -Wl,-Bsymbolic "
    }
    add(MacOsX, x64) {
        headerDirs += genHeaders("macos64")
        libraries += genLibs("macos64") + " -liconv -lbz2 -lz -framework CoreFoundation -framework CoreVideo"
        cFlags += " -mmacosx-version-min=10.11"
        cppFlags += " -mmacosx-version-min=10.11"
        linkerFlags += " -mmacosx-version-min=10.11"
    }
    add(MacOsX, x64, ARM) {
        headerDirs += genHeaders("macosarm64")
        libraries += genLibs("macosarm64") + " -liconv -lbz2 -lz -framework CoreFoundation -framework CoreVideo"
        cFlags += " -mmacosx-version-min=10.11"
        cppFlags += " -mmacosx-version-min=10.11"
        linkerFlags += " -mmacosx-version-min=10.11"
    }
}

tasks.register('buildFFmpegWindowsAll') {
    dependsOn buildFFmpegWindows32, buildFFmpegWindows64
}

tasks.register('buildFFmpegLinuxAll') {
    dependsOn buildFFmpegLinux64, buildFFmpegLinuxARM32, buildFFmpegLinuxARM64
}

tasks.register('buildFFmpegMacosAll') {
    dependsOn buildFFmpegMacos64, buildFFmpegMacosARM64
}

tasks.register('jnigenBuildWindowsAll') {
    dependsOn jnigenBuildWindows, jnigenBuildWindows64
}

tasks.register('jnigenBuildLinuxAll') {
    dependsOn jnigenBuildLinux64, jnigenBuildLinuxARM, jnigenBuildLinuxARM64
}

tasks.register('jnigenBuildMacosAll') {
    dependsOn jnigenBuildMacOsX64, jnigenBuildMacOsXARM64
}

jar {
    from fileTree("libs").files
}

eclipse.project {
    name = projectGroup + "-desktop"
}
