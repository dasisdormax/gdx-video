tasks.register('cleanFFmpeg')
tasks.register('cleanAV1')
clean.configure {
    dependsOn 'cleanFFmpeg'
    dependsOn 'cleanAV1'
}

String checkCrossPrefix(String crossToolchain) {
    def tc = crossToolchain
    if (tc == null || System.getProperty("os.name").startsWith("Win")) return ""
    def result = project.exec {
        ignoreExitValue = true
        commandLine "bash", "-l", "-c",
                "(command -v $tc-g++ && command -v $tc-ar && command -v $tc-ld)>/dev/null"
    }
    if (result.getExitValue() == 0) {
        return "$tc-"
    }
    return ""
}

String checkCrossFile(String buildName, String crossToolchain) {
    String prefix = checkCrossPrefix(crossToolchain)
    if (prefix.isEmpty()) {
        return ""
    }
    def options = [
            "Windows32" : "i686-w64-mingw32",
            "Windows64" : "x86_64-w64-mingw32",
            "LinuxARM64": "aarch64-linux"
    ]
    def name = options[buildName]
    if(name == null) return ""
    return "src/dav1d/package/crossfiles/${name}.meson"
}


void registerBuild(String buildName, String crossToolchain, String... extraArgs) {
    String outDir = file("build/${buildName.toLowerCase()}").absolutePath
    String av1Dir = "$outDir/src/dav1d"
    String ffDir = "$outDir/src/FFmpeg"

    def crossPrefix = checkCrossPrefix(crossToolchain)
    def crossFile = checkCrossFile(buildName, crossToolchain)

    tasks.register("cleanAV1$buildName", Delete) {
        delete av1Dir
        delete "$outDir/lib/libdav1d.a"
    }
    cleanAV1.configure {
        dependsOn "cleanAV1$buildName"
    }
    tasks.register("buildAV1$buildName") {
        doFirst {
            mkdir av1Dir
            String[] crossArgs = []
            String crossPath = ""
            if (!crossFile.isEmpty()) {
                crossPath = file(crossFile).absolutePath
            } else if(buildName == "Macos64") {
                crossPath = file("src/x86_64-macos.meson").absolutePath
            } else if(buildName == "MacosARM64") {
                crossPath = file("src/arm64-macos.meson").absolutePath
            } else if(buildName == "Linux64" && System.getProperty("os.name") != "Linux") {
                crossPath = file("src/x86_64-linux.meson").absolutePath
            } else if(buildName == "LinuxARM32") {
                crossPath = file("src/arm32-linux.meson").absolutePath
            }
            if (!crossPath.isEmpty()) {
                crossArgs = ["--cross-file=$crossPath"]
            }
            project.exec {
                workingDir av1Dir
                executable 'meson'
                args 'setup', '-Denable_tools=false', '-Denable_tests=false'
                args crossArgs
                args '../../../../src/dav1d', '--default-library=static'
                args '--prefix', "$outDir"
                args "--libdir=$outDir/lib"
            }
            project.exec {
                workingDir av1Dir
                commandLine 'ninja'
            }
            project.exec {
                workingDir av1Dir
                commandLine 'ninja', 'install'
            }
        }
        outputs.upToDateWhen { file("$outDir/lib/libdav1d.a").exists() }
    }

    tasks.register("cleanFFmpeg$buildName", Delete) {
        delete ffDir
        delete "$outDir/lib/libavformat.a"
    }
    cleanFFmpeg.configure {
        dependsOn "cleanFFmpeg$buildName"
    }
    tasks.register("buildFFmpeg$buildName") {
        dependsOn "buildAV1$buildName"
        doFirst {
            mkdir ffDir
            String[] crossArgs = []
            if (!crossPrefix.isEmpty()) {
                crossArgs = ["--enable-cross-compile", "--cross-prefix=$crossPrefix"]
            }
            project.exec {
                workingDir ffDir
                environment["PKG_CONFIG_PATH"] = "$outDir/lib/pkgconfig"
                executable '../../../../src/FFmpeg/configure'
                args '--pkg-config=pkg-config', '--pkg-config-flags=--static'
                args '--disable-autodetect'
                args '--enable-pic', '--disable-symver', '--disable-doc', '--disable-shared', '--enable-static'
                args crossArgs
                args '--disable-everything'
                args '--enable-protocol=file', '--enable-filter=aresample', '--enable-filter=deshake'
                args '--enable-demuxer=ogg', '--enable-demuxer=matroska', '--enable-demuxer=mov'
                args '--enable-decoder=vorbis', '--enable-decoder=opus', '--enable-decoder=aac'
                args '--enable-decoder=vp8', '--enable-decoder=vp9', '--enable-decoder=theora', '--enable-decoder=av1'
                args '--enable-libdav1d', '--enable-decoder=libdav1d'
                args "--extra-cflags=-I$outDir/include"
                args "--extra-ldflags=-L$outDir/lib"
                args "--prefix=$outDir"
                // Uncomment the following line for MP4 video support:
                //args '--enable-decoder=h264', '--enable-decoder=hevc'
                args extraArgs
            }
            project.exec {
                workingDir ffDir
                commandLine 'make', '-j16'
            }
            project.exec {
                workingDir ffDir
                commandLine 'make', 'install'
            }
        }
        outputs.upToDateWhen { file("$outDir/lib/libavformat.a").exists() }
    }
}

registerBuild 'Windows32', 'i686-w64-mingw32', '--arch=x86', '--target-os=mingw32'
registerBuild 'Windows64', 'x86_64-w64-mingw32', '--arch=x86_64', '--target-os=mingw32'

registerBuild 'Linux64', 'x86_64-linux-gnu', '--arch=x86_64', '--target-os=linux', '--disable-cuda', '--disable-cuvid'

registerBuild 'LinuxARM32', 'arm-linux-gnueabihf', '--arch=arm', '--target-os=linux'
registerBuild 'LinuxARM64', 'aarch64-linux-gnu', '--arch=aarch64', '--target-os=linux'

registerBuild 'Macos64', null, '--enable-cross-compile',// '--enable-hwaccel=h264_videotoolbox', '--enable-hwaccel=hevc_videotoolbox',
        '--arch=x86_64', '--target-os=darwin', '--cc=clang', '--cxx=clang++', '--dep-cc=clang',
        '--extra-cflags=-mmacosx-version-min=10.11 -arch x86_64', '--extra-cxxflags=-mmacosx-version-min=10.11 -arch x86_64', '--extra-ldflags=-mmacosx-version-min=10.11 -arch x86_64'
registerBuild 'MacosARM64', null, '--enable-cross-compile',// '--enable-hwaccel=h264_videotoolbox', '--enable-hwaccel=hevc_videotoolbox',
        '--arch=arm64', '--target-os=darwin', '--cc=clang', '--cxx=clang++', '--dep-cc=clang',
        '--extra-cflags=-mmacosx-version-min=10.11 -arch arm64', '--extra-cxxflags=-mmacosx-version-min=10.11 -arch arm64', '--extra-ldflags=-mmacosx-version-min=10.11 -arch arm64'

tasks.register('buildFFmpegWindowsAll') {
    dependsOn buildFFmpegWindows32, buildFFmpegWindows64
}

tasks.register('buildFFmpegLinuxAll') {
    dependsOn buildFFmpegLinux64, buildFFmpegLinuxARM32, buildFFmpegLinuxARM64
}

tasks.register('buildFFmpegMacosAll') {
    dependsOn buildFFmpegMacos64, buildFFmpegMacosARM64
}